# -*- coding: utf-8 -*-
"""CSI_4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M7SdNe21GpT2h8UmQuQi30BPWDIhJZoP
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.feature_selection import SelectKBest, f_classif
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

data = {
    'age': [25, 30, np.nan, 35, 40],
    'gender': ['male', 'female', 'female', np.nan, 'male'],
    'salary': [50000, 60000, 55000, 65000, np.nan],
    'purchased': ['no', 'yes', 'no', 'yes', 'no']
}
df = pd.DataFrame(data)

X = df.drop('purchased', axis=1)
y = df['purchased']

num_features = ['age', 'salary']
num_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='mean')),
    ('scaler', StandardScaler())
])

cat_features = ['gender']
cat_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='most_frequent')),
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])

preprocessor = ColumnTransformer(
    transformers=[
        ('num', num_transformer, num_features),
        ('cat', cat_transformer, cat_features)
    ])

pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('feature_selection', SelectKBest(score_func=f_classif, k=3))  # Changed k to match the number of features
])

X_preprocessed = pipeline.fit_transform(X, y)
cat_onehot_features = pipeline.named_steps['preprocessor'].named_transformers_['cat'].named_steps['onehot'].get_feature_names_out(cat_features)
all_features = num_features + cat_onehot_features.tolist()

selected_features = np.array(all_features)[pipeline.named_steps['feature_selection'].get_support()]

X_preprocessed_df = pd.DataFrame(X_preprocessed, columns=selected_features)

print(X_preprocessed_df)

plt.figure(figsize=(12, 6))

# Box plot
plt.subplot(1, 2, 1)
sns.boxplot(data=X_preprocessed_df)
plt.title('Box Plot of Preprocessed Features')

plt.subplot(1, 2, 2)
sns.pairplot(pd.concat([X_preprocessed_df, y.reset_index(drop=True)], axis=1), hue='purchased')
plt.title('Pair Plot of Preprocessed Features')

plt.tight_layout()
plt.show()